파이썬 기초를 알아봅시다!!
[부족한 부분은 점프 투 파이썬 참고]

x = input(x)             # x에 문자열 입력을 받는다. 
x = int(x)               # x는 정수이다
x = float(x)             # x는 실수이다
x = int(input("숫자"))   # x에 문자열을 입력받고 그 입력받은 값을 정수로 만든다. 단 문자열사용 X   
x = float(input("숫자")) # x에 문자열을 입력받고 그 입력받은 값을 정수로 만든다. 단 문자열사용 X
x = 5                    # x에 정수  5를 대입    ==   (x = 정수)
x = "5"                  # x에 문자열 "5"를 넣는다 == (x = 문자열) 

#숫자형
x = 5                    # x는 정수 5 이다.
b = 2                    # b는 정수 2 이다.

( + )
x + b = 7                # x(5) + b(2) == 7 (x 더하기 b 는 7 이다.)
x += b                   # x = x+b (x = 7) 

( - )
x - b = 3                # x(5) - b(2) = 3 (x 뺴기 b 는 3이다.)
x -= b = 3               # x = x-b == 3    (x = 3)

( * , ** )
x * b = 10               # x(5) * b(2) = 10   (5 곱하기 2) 
x ** b = 25              # x(5) ^ b(2) = 25   (5 곱하기 5)
x *= b = 10              # x(5) = x(5) * b(2) (x 곱하기 2)
x **= b =25              # x = x(5) ^ b(2)    ( x 를 b 만큼 제곱)
# * = 곱하기,   ** = 제곱

( / , // )
x(5) / b(2) = 2.5        # x(5) / b(2) = 2.5 ( 5 나누기 2 )
x(5) // b(2) = 2         # x(5) // b(2) = 2  ( 5 나누기 2 몫 구하기 (정수))
x(5) /= b(2)             # x = x(5) / b(2)   ( x 나누기 b) 
x(5) //= b(2)            # x = x(5) // b(2)  ( x 나누기 b 몫 구하기 (정수))

( % )
x(5) % b(2) = 1          # x(5) % b(2) = 1  (나머지 구하기)
x(5) %= b(2) = 1         # x = x(5) % b(2)  (나머지 구하기)

#문자열
표시 방법
"basic"
'basic'
"""basic"""
'''basic'''
전부 사용 가능....!

"""basic"""
'''basic'''
이 두가지는 줄 바꾸기 가능.

예)
""" 
1.basic
2.basic
3.basic
"""
이런 식으로 가능.

x = "basic"   # x에 문자열 "basic" 저장한다.

"basic" basic" # 이 것은 인식은 되지만 basic 단 한 단어만 인식으로 에러가 발생!  

아래의 식으로 입력을 한다면 작은 따음표 1개는 그냥 문자열로 표시되어 출력된다.

"basic ' basic" # 큰은따옴표 안에 사용된 작은따옴표는 문자열을 만드는 기호로 인식되지 않는다.

만약 큰따음표 4개가 들어간다면?
"!!"basic"!!"

"!!\"basic\"!!"
이런 식으로 역 슬레시를 사용하면 문자열로 가능하다.
역슬 사용(X) 출력 => "!!"    "!!" (사실 이것도 안나오고 에러가 나온다.")
역슬 사용(O) 출력 => "!!"basic"!!"

(\n)
"basic \n basic"
역슬n 을 사용하면 줄 바꾸기가 가능하다.
출력 => basic
        basic
이런식으로 가능하다.

( 중요! )
이스케이프 코드 = "간단히 말해서 이리 정해둔 코드의 조합이다." 
\n  	문자열 안에서 줄을 바꿀 때 사용
\t  	문자열 사이에 탭 간격을 줄 때 사용
\\  	\를 그대로 표현할 때 사용
\'  	작은따옴표(')를 그대로 표현할 때 사용
\"  	큰따옴표(")를 그대로 표현할 때 사용
\r  	캐리지 리턴(줄 바꿈 문자, 커서를 현재 줄의 가장 앞으로 이동)
\f  	폼 피드(줄 바꿈 문자, 커서를 현재 줄의 다음 줄로 이동)
\a  	벨 소리(출력할 때 PC 스피커에서 '삑' 소리가 난다)
\b  	백 스페이스
\000	널 문자

# 이 중에서 활용 빈도가 높은 것은 \n, \t, \\, \', \"이다. 나머지는 프로그램에서 잘 사용하지 않는다.

(문자 연결!)
a = "basic"
b = " important"
a + b = "basic important"
c = "basic important"
c * 2 = "basic important basic important"

print("="*50)
print(c)
print("="*50)

출력
==================================================
"basic important"
==================================================

문자열 또는 리스트의 길이 구하는 len()
a = "basic"
len(a)
출력 = 5

문자열의 각 문자마다 번호를 매겨 보면 다음과 같다.
a = "basic"
basic   b  a  s  i  c
01234  -5 -4 -3 -2 -1
print(a[0:2], a[-3])  #a[0:2] 0~2까지 출
출력 ba s

# 문자열 포매팅
문자열 안의 특정한 값을 바꿔야 하는 경우가 있을 때 이것을 가능하게 해 주는 것이 바로 문자열 포매팅이다.
코드 설명.
%s == 문자열(string)
%c == 문자 1개 (charactre)
%d == 정수(integer)
%f == 부동소수(floating - point)
%o == 8진수
%x == 16진수
%% == Literal % (문자 % 자체)

숫자 대입
"I eat %d python." % 3

=> 'I eat 3 python.
문자열 안의 숫자를 넣고 싶은 자리에 %d는 '문자열 포멧 코드'하고 부른다.

문자열 대입

" I Love %s" % "python"
=> 'I Love python'

문자열 안에 또 다른 문자열을 삽입하기 위해 앞에서 사용한 문자열 포맷 코드 %d 가 어닌 %s를 썼다. 즉 문자열을 넣기 위해서는 %s를 써야 한다는 사실

숫자 값을 나타내는 변수로 대입
py = 12
"i eat %d python" % py
=> 'i eat 12 python'
숫자로 대입하든, 숫자 값을 나타내는 변수를 대입라든 결과는 같다.

2개 이상의 값 넣기
py = 12
thon = "python"
"i eat %d %s" % (py,thon)
=> 'i eat 12 python"
2개 이상의 값을 넣으려면 (,)안에 쉼표로 구분해서 넣어야한다. 단 포맷 코드는 잘 지켜야 작동이 된다.

#format 함수를 사용한 포매팅
문자열의 format 함수를 사용하면 좀 더 발전된 스타일로 문자열 포맷을 지정할 수 있다.

숫자 대입
"i got {0} cords".format(2) 
=> 'i got 2 cords'
포매팅 => 위에 {0} 자리에 2가 들어감.

문자열 바로 대입하기
"i got {0} cords".format("two")
=> 'i got two cprds"
{0} 자리에 two가 들어갔다.

숫자 값을 가진 변수로 대입하기
py = 2
"i got {0} cords".format(py)
=> 'i got 2 cords'
{}자리에 py하는 변수의 값이 들어감.

2개 이상의 값 넣기
py = 2
thon = "python"
"i got {0} {1}".format(py,thon)
2개 이상의 값을 넣는 경우 {0} {1} 로 인데스스 항목이 format 한 수의 입력값으로 순서에 맞게 바뀐다.
위에 {0}에는 변수 py가 들어갔고 {1}에는 변수 thon이 들어갔다. 이 처럼 입력한 순서대로 0,1,2의 번호가 붙어 위와 같은 식으로 사용해야 한다.

변수의 이름으로 넣기
py = 2
thon = "python"
"i got {py} {thon} cords".format(py,thon)
이 처럼 더 편리하게 변수의 이름으로 사용을 많이하는 편이다.

인덱스와 이름 둘다 사용해서 출력하기
python = "python"
"i got {0} {python} cords".format(2,python)
이런 식으로도 가능하다.

왼쪽 정렬
"{0:<5}".format("py")
'py   '
:<5 표현식을 사용하면 치환되는 문자열을 왼쪽으로 정렬하고 문자열의 총 자릿 수를 10으로 맞출 수 있더.

오른쪽 정렬
"{0:>5}".format("py")
'   py'

가운데 정렬
"{0:^10}".format("py")
"   py   "

공백 채우기
"{0:=^10}".format("py")
"====py===="
"{0:!^10}".format("py")
"!!!!py!!!!"

#f 문자열 포매팅
파이썬 3.6 버전부터는 f 문자열 포매팅 기능을 사용할 수 있다. 3.6버전 미만부터는 사용할 수 없다. 

py = 'py'
thon = 'thon'
f'나는 {py}{thon}이 가장 좋아'
=> 나는 python이 가장 좋아
이런 식으로 .format을 사용하기 보다는 f문자열 포매팅을 많이 사용한다.

숫자 대입
py = 17
>>> f'나는 내년이면 {py + 1}살이 된다.'
'나는 내년이면 18살이 된다.'

#문자열 관련 함수들
문자열 자료형은 자체적으로 함수를 가지고 있다. 이들 함수를 다른 말로 "문자열 내장 함수"라고 한다.
내장 함수를 사용하려면 문자열 변수 이름 뒤에 "."를 붙인 후 이름을 써 주면 된다.

1. 문자 개수 세기 count 
py = "i love python"
=> py.count('o')
=> 2

2. 위치 알려 주기 find
py = "i love python"
py.find("l")
=> 2
py.find("m")
=> -1
find 함수로 문자열 중 문자 l가 처음으로 나온 위치를 변환함. 만약 찾는 문자열이 존재하지 않는다면 -1로 변환한다.

파이썬은 숫자를 0부터 세기 떄문에 ㅣ의 위치는 3이 아니라 2가 된다.

2-1 위치 알려 주기 index
내가 선택한 문자열이 있는 경우
py = "i love python"
py.index("e")
=> 5
내가 선택한 문자열이 없는 경우
py.index("m")
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
ValueError: substring not found 

만약 내가 선택한 문자가 문자열 내에 있으면 find와 똑같이 출력하지만.만약 아니라면 에러코드가 나온다.

3. 문자열 삽입 join
",".join('python')
=> 'p,y,t,h,o,n'
으로 출력
만약 리스트를 활용해서 출력하려면.
>>> ",".join(['p', 'y', 't', 'h', 'o', 'n'])
'p,y,t,h,o,n'
이런 식으로 사용가능

4. 소문자를 대문자로 바꾸기 - upper
py = 'python'
py.upper()
'PYTHON'
그런대 문자열이 이미 대문자라면 아무런 변화도 일어나지 않는다.

5.대문자를 소문자로 바꾸기 - lower
py = "PYTHON"
py.lower()
"python"

6.왼쪽 공백 지우기 -lstrip
py = "python"
py.lstrip()
"python "
문자열 중 가장 왼쪽에 있는 한칸 이상의 연속된 공백을 모두 지운다.

6-1 오른쪽 공백 지우기 rstrip
py = "python"
py.rstrip()
" python"
문자열 중 가장 오른쪽에 있는 한칸 이상의 연속된 공백을 모두 지운다.

6-2 양쪽 공백 지우기 strip
py = "python
py.strip()
'python'
문자열 양쪽에 있는 한칸 이상의 연속된 공백을 모두 지운다.

7.문자열 바꾸기 replace
py = "my life is python"
py.replace("my","Your")
=> 'Your life is python'

8.문자열 나누기 split
py = "my Life is python"
py.split()
['my', 'Life', 'is', 'python']
py = "a:b:c:d"
py.split(':')
['a', 'b', 'c', 'd']

split 함수는 py.split()처럼 괄호 안에 아무 값도 넣어 주지 않으면 공백([Space], [Tab], [Enter])을 기준으로 문자열을 나누어 준다.
만약 py.split(':')처럼 괄호 안에 특정 값이 있을 경우에는 괄호 안의 값을 구분자로 해서 문자열을 나누어 준다. 이렇게 나눈 값은 리스트에 하나씩 들어간다.
['my', 'Life', 'is', 'python']나 ['a', 'b', 'c', 'd']가 리스트인데, 여기에서는 너무 신경 쓰지 않아도 된다.
앞에서 소개한 문자열 관련 함수는 문자열 처리에서 사용 빈도가 매우 높고 유용하다. 이 밖에도 몇 가지가 더 있지만 자주 사용하지는 않는다.








