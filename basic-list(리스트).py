리스트를 공부하자!

지금까지 우리는 숫자와 문자열에 대해서 알아보았다. 하지만 숫자와 문자열만으로 프로그래밍을 하기에는 부족한 점이 많다.
예를 들어 1부터 10까지의 숫자 중 홀수의 모음인 1, 3, 5, 7, 9의 집합을 생각해 보자. 
이런 숫자의 모음을 숫자나 문자열로 표현하기는 어렵다. 파이썬에는 이러_한 불편함을 해소할 수 있는 자료형이 존재한다.
이것이 바로 지금부터 공부할 리스트(list)이다.

py = [1,2,3,4,5]
리스트를 만들 때는 위에서 보는 것과 같이 대괄호([])로 감싸 주고 각 요솟 값은 쉼표(,)로 구분해 준다.
리스트명 = [요소,요소,요소,....]
여러 가지 리스트의 생김새는 다음과 같다.
py_a = []                               # 비어 있는 리스트 만드는법.
py_b = [1, 2, 3]                        # 숫자를 요솟값으로 가진다.
py_c = ['my', 'Life', 'is', 'python']   # 문자열을 요솟값으로 가진다.
py_d = [1, 2, 'my', 'Life']             # 숫자와 문자열을 요솟값으로 가질 수 있다,
py_e = [1, 2, ['my', 'Life']]           # 리스트 자체를 요솟값으로 가질 수 있다.

즉, 리스트 안에는 어떠한 자료형도 표함할 수 있다.

# 리스트의 인덱싱과 슬라이싱
리스트도 문자열처럼 인덱싱과 슬라이싱이 가능하다.
py = [1,3,5]
py
[1,3,5]

py[0]
1
py[0]은 리스트 py의 첫 번째 요솟값을 말한다.

py[0] + py[2]  #py[0]은 첫번쨰 요솟값 py[2]는 세번째 요솟값.
6
이 식은 1 + 5 라고 해석되어 값은 6이다.

py[-1]
5
파이썬은 숫자를 0부터 세기 때문에 py[1]이 리스트 py의 첫 번째 요소가 아니라 py[0]이 리스트 py의 첫 번째 요소라는 것을 명심하자.
py[-1]은 문자열에서와 마찬가지로 리스트 py의 마지막 요솟값을 말한다.

py = [1, 2, 3, ['a', 'b', 'c']]

>>> py[0]
1
>>> py[-1]
['a', 'b', 'c']
>>> py[3]
['a', 'b', 'c']

위의 설명을 전부 보고온다면, 이 식과 이렇게 나오는 이유는 당연히 알 것 이다.
py[0]은 py의 첫번째 요소를 뜻하고
py[-1]은 마지막 요소를 뜻하고
py[3]는 py의 4번째 값을 말한다.

py[-1][0]
'a'
py[-1][1]
'b'
py[-1][2]
'c' 
위와 같이 하면 'a'를 끄집어 낼 수 있다. py[-1]이 ['a', 'b', 'c'] 리스트라는 것은 이미 설명했다.
바로 이 리스트에서 첫 번째 요소를 불러오기 위해 [0]을 붙여 준 것이다.

# 삼중 리스트에서 인덱싱하기
py = [1,2,['a','b',['my','life']]]

리스트 a 안에 ['a', 'b', ['Life', 'is']] 리스트가 포함되어 있고 그 리스트 안에 다시 ['Life', 'is'] 리스트가 포함되어 있다.
즉, 삼중 구조의 리스트인 것이다.

이 경우, 'Life' 문자열만 끄집어 내려면 다음과 같이 해야 한다.
py[2][2][1]
'life'
위 예는 리스트 py의 세 번째 요소인 리스트 ['a', 'b', ['Life', 'is']]에서 세 번째 요소인 리스트 ['Life', 'is']의 첫 번째 요소를 나타낸다.
리스트를 다중으로 중첩해서 사용하는 것은 혼란스럽기 때문에 자주 사용하지는 않는다.

#리스트의 슬라이싱
문자열과 마찬가지로 리스트에서도 슬라이싱 기법을 적용할 수 있다.
슬라이싱은 '잘라 낸다'라는 뜻이다.
py = [1,2,3,4,5]
py[0:2]
[1,2]

문자열에서 슬라이싱 했던 예와 비교해 보자.
py = "12345"
py[0:2]
'12'

문자열에서 했던것과 사용법이 완전히 동일하다.

#중첩된 리스트에서 슬라이싱하기
리스트가 포함된 중첩 리스트 역시 슬라이싱 방법은 똑같이 적용된다.

py = [1, 2, 3, ['a', 'b', 'c'], 4, 5]
py[2:5]
[3, ['a', 'b', 'c'], 4]
py[3][:2]
['a', 'b']
위 예에서 py[3]은 ['a', 'b', 'c']를 나타낸다.
따라서 py[3][:2]는 ['a', 'b', 'c']의 첫 번째 요소부터 세 번째 요소 직전까지의 값,
즉 ['a', 'b']를 나타내는 리스트가 된다.

# 리스트 연산하기
리스트 역시 +를 사용해서 더할 수 있고 *를 사용해서 반복할 수 있다.
py = [1,2,3]
thon = [4,5,6]
py+thon
[1,2,3,4,5,6]
리스트 사이에서 +는 2개의 리스트를 합치는 기능을 한다.
문자열에서 "py" + "thon" = "python"이 되는 것과 같은 이치이다.

리스트 반복하기(*)
py = [1,2,3]
py * 2
[1,2,3,1,2,3]
위에서 볼 수 있듯이 [1, 2, 3] 리스트가 두 번 반복되어 새로운 리스트를 만들어 낸다. 
문자열에서 "python" * 2 = "pythonpython" 가 되는 것과 같은 이치이다.

리스트 길이 구하기
리스트 길이를 구하기 위해서는 len함수를 사용해야한다.
py = [1,2,3]
len(py)
3
len은 많이 사용되므로 자주 사용해서 잘 기억해야한다.

# 리스트의 수정과 삭제
리스트는 값을 수정하거나 삭제할 수 있다.

리스트의 값 수정
py = [1,2,3]
py[2] = 5
py
[1,2,5]
py의 세번째 요솟값이 5로 바뀌었다.
del 함수를 사용해 리스트 요소 삭제하기
py = [1,2,3]
del py[1]
py
[1,2]
del py[x]는 x번쨰 요솟값을 삭제한다. 위에는 py리스트에서 py[1]을 삭제했다.
del 함수는 파이썬이 자체적으로 가지고 있는 삭제 함수이며 다음과 같이 사용한다



del 객체
객체 = 파이썬에서 사용되는 모든 자료형

슬라이싱 기법을 사용해보자.
py = [1,2,3,4,5]
del py[2:]
py
[1,2]

py[2:]에 해당하는 리스트의 요소들이 삭제되었다.
리스트의 요소를 삭제하는 방법에는 2가지가 더 있다. 바로 리스트의 remove와 pop 함수를 사용하는 것인데,
이는 리스트 관련 함수에서 설명한다.

# 리스트 관련 함수

리스트에 요소 추가하기 -append
append는 사전적 의미로는 "덧붙이다,첨부하다"이다,이 뜻은 파이썬의 리스트에서도 똑같이 사용된다.

py = [1,2,3]
py.append(0)
py
[1,2,3,0]
append(x)는 리스트의 맨 마지막에 x를 추가하는 함수이다.


